// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.data;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SubRepository_Factory implements Factory<SubRepository> {
  private final Provider<SubscriptionDao> subDaoProvider;

  private final Provider<SubscriptionDetailsDao> subDetailsDaoProvider;

  public SubRepository_Factory(Provider<SubscriptionDao> subDaoProvider,
      Provider<SubscriptionDetailsDao> subDetailsDaoProvider) {
    this.subDaoProvider = subDaoProvider;
    this.subDetailsDaoProvider = subDetailsDaoProvider;
  }

  @Override
  public SubRepository get() {
    return newInstance(subDaoProvider.get(), subDetailsDaoProvider.get());
  }

  public static SubRepository_Factory create(Provider<SubscriptionDao> subDaoProvider,
      Provider<SubscriptionDetailsDao> subDetailsDaoProvider) {
    return new SubRepository_Factory(subDaoProvider, subDetailsDaoProvider);
  }

  public static SubRepository newInstance(SubscriptionDao subDao,
      SubscriptionDetailsDao subDetailsDao) {
    return new SubRepository(subDao, subDetailsDao);
  }
}
