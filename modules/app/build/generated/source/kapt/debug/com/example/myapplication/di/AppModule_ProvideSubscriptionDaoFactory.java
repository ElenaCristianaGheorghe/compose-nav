// Generated by Dagger (https://dagger.dev).
package com.example.myapplication.di;

import com.example.myapplication.data.MyDatabase;
import com.example.myapplication.data.SubscriptionDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideSubscriptionDaoFactory implements Factory<SubscriptionDao> {
  private final Provider<MyDatabase> dbProvider;

  public AppModule_ProvideSubscriptionDaoFactory(Provider<MyDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public SubscriptionDao get() {
    return provideSubscriptionDao(dbProvider.get());
  }

  public static AppModule_ProvideSubscriptionDaoFactory create(Provider<MyDatabase> dbProvider) {
    return new AppModule_ProvideSubscriptionDaoFactory(dbProvider);
  }

  public static SubscriptionDao provideSubscriptionDao(MyDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideSubscriptionDao(db));
  }
}
